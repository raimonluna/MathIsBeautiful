=================================================================

Brownian trees can be used to model a huge amount of natural phenomena. Many of them are related to the growth living things such as trees, lichen and neurons. But other similar patterns appear in physical phenomena like mineral cristallization, the freezing of water, or electrical discharges such as lightning and Lichtenberg figures.

These brownian trees are mathematically created through a method called diffusion-limited aggregation, in which a large number of particles move in a random walk through space. Such random walks are often called Brownian motion, as they resemble the trajectories of microscopic particles suspended in a fluid, as observed by Robert Brown in 1827.

We start by placing a seed for the tree, or nucleation center, in the middle of the image. When one of the walkers comes into contact with the tree, it gets stuck to it and stops moving. As more and more particles aggregate to it, the structure acquires its characteristic dendritic structures. Brownian trees were first described by T. A. Witten, Jr. and L. M. Sander in 1981.

Do it yourself! Source code: https://github.com/raimonluna/MathIsBeautiful/blob/main/MIB_2024/MIB_2024_11/MIB0012_BrownianTree.py

=================================================================

Goldbach's conjecture states that every even positive integer except 2 can be written as the sum of two primes. The conjecture was proposed in 1742 by Christian Goldbach, but remains unproven to this day. This makes it one of the oldest unsolved problems in mathematical history. Its extraordinary difficulty has made it so famous that it appears even in movies: Haven't you watched "La habitación de Fermat" (Fermat's room) yet?

Something that the conjecture does not specify is the number of ways in which each even integer can be expressed as a sum of two primes. For instance, the number 24 can be written as 13 + 11, but also as 17 + 7 or as 19 + 5. Three ways in total. On the other hand, the number 12 can only be decomposed in one way, as 7 + 5.

The picture above is called the Goldbach comet. It shows the number of ways of decomposing each of the first 50.000 even integers into primes. The function is technically called the Goldbach partition function. In this case, the horizontal axis goes from 1 to 100.000, while the vertical axis goes from 1 to 2200.

Do it yourself! Source code: https://github.com/raimonluna/MathIsBeautiful/blob/main/MIB_2024/MIB_2024_11/MIB0013_GoldbachConjecture.py

=================================================================

The Heighway dragon curve is one of the simplest, yet facinating, fractals. It can be generated from a simple line segment, by iteratively concatenating the curve with a copy of itself rotated 90 degrees. One of its many interesting properties is that it can be used as a tile to cover the plane without leaving any empty space. Also, it is an example of a space-filling curve, which reaches any point of its two-dimensional interior.

There exist many varieties of dragon curves. The one in the picture was discovered by John Heighway in 1966, who investigated it with his colleagues at NASA William Harter and Bruce Banks. In 1967 Martin Gardner featured it in the Scientific American section Mathematical Games. More properties were then revealed by Chandler Davis and Donald Knuth in 1970. This curve is also known as the Jurassic Park dragon, as it appears in the original book by Michael Crichton.

A background of smoke seemed appropriate for the dragon. The smoke in the picture is another example of a fractal, in this case it is fractal Perlin noise. Perlin noise is a randomly generated texture, created by Ken Perlin in 1983. This type of noise is extensively used in computer graphics to produce realistic textures, such as mountains, clouds or even videogame maps. Fractal Perlin noise takes this a step further by adding together several layers of Perlin with increasing frequencies and decreasing amplitudes.

Do it yourself! Source code: https://github.com/raimonluna/MathIsBeautiful/blob/main/MIB_2024/MIB_2024_11/MIB0014_DragonCurve.py

=================================================================

The Burning Ship fractal is a terrifying relative of the Mandelbrot set, in which we take the absolute values of the real and imaginary parts of complex numbers before squaring them. The iteration we do in this case is z -> (|a| - i|b|)^2 + c, where z = a + ib. It was discovered in 1992 by Michael Michelitsch and Otto E. Rössler. In the image, the real part ranges from -1.8 to -1.7, while the imaginary part goes from -0.015 to 0.085.

In this case, instead of a burning ship, I chose the color map to make it look like a ghost ship... Fans of One Piece will recognise Gecko Moria's face at the bottom right corner of the picture. The colors may also remind you of the fallen city of Minas Morgul, home of the Witch-King of Angmar and his army of Nazgûl. Sweet dreams... :)

Do it yourself! Source code: https://github.com/raimonluna/MathIsBeautiful/blob/main/MIB_2024/MIB_2024_11/MIB0015_BurningShip.py

=================================================================

Cellular automata are some cool mathematical constructions in which space is divided in a grid of cells, which can be in a number of states (in our case, red, green and blue). The system evolves in finite jumps, or generations, in which all cells are updated from the previous state. The new state of each cell depends only on how its neighboring cells were at the previous generation, according to some simple rule. I guess the most famous example is Conway's Game of Life (coming soon!).

This particular example is called the rock-paper-scissors automaton, inspired by the popular game. Red beats blue, green beats red, and blue beats green. In order for a cell to change color, 3 or more of its closest neighbors must be of the dominant color. Otherwise, the cell remains the same. This produces an alternating pattern in which color fronts take over regions of the plane periodically. As time progresses, the cells tend to organize into stationary spirals separated by flat-front regions.

As usual, cellular automata can be used to model a lot of physical and natural systems. In a way, the great majority of computer simulations are some slight variation of a cellular automaton. From aerodynamics to black holes. In the case of the rock-paper-scissors automaton, the evolution resembles a Belousov–Zhabotinsky chemical reaction, in which several states alternate in a cyclic manner.

Do it yourself! Source code: https://github.com/raimonluna/MathIsBeautiful/blob/main/MIB_2024/MIB_2024_11/MIB0016_RockPaperScissors.py

=================================================================

When you have a set of points in space, each point has a region to which it is the closest. Drawing the boundaries between such regions gets you the Voronoi diagram of the set. The most famous are the ones in 2 dimensions, such as the one in the picture. You can check that the black lines between each pair of Voronoi cells are the perpendicular bisectors of the segments between points. Obviously, these diagrams and their higher-dimensional versions have a huge number of practical applications, such as finding the closest metro station in your city.

To make it more interesting, in this case we use a color map to plot the difference in distance between the two nearest points, normalized by the largest distance. This provides a continuous variation of values, from 0 at the Voronoi boundaries, to 1 at the reference points. The color map should remind you of the Pride Homunculus, from Fullmetal Alchemist. Look out for him, lurking in the shadows... :)

Do it yourself! Source code: https://github.com/raimonluna/MathIsBeautiful/blob/main/MIB_2024/MIB_2024_11/MIB0017_VoronoiDiagram.py

=================================================================

Here goes first attempt at rendering of the Buddhabrot. The definition of the Mandelbrot set focuses on whether the trajectories of points remain bounded or escape to infinity when we iterate the map z --> z^2 + c. Instead, the Buddhabrot is defined as the probability distribution for such trajectories, only for points that eventually escape to infinity. In other words, the distribution of the orbits outside the Mandelbrot set.

This amazing visualization technique was discovered and published by Melinda Green in 1993. The name Buddhabrot was introduced by Lori Gardi, due to its resemblance to Hindu art. In my implementation I used some important ideas from a blog post by Jean-Christophe Loiseau, particularly the use of Sobel filtering to extract the boundary of the Mandelbrot.

The color in the image is based on the number of iterations it takes for the sampled points to escape. Red, green and blue correspond to sequences that took less than 5000, 500 and 50 iterations, respectively. This type of false color technique is sometimes called Nebulabrot, due to its resemblance to the false-color NASA images of nebulae, where each color channel is used for a different frequency range.  

Do it yourself! Source code: https://github.com/raimonluna/MathIsBeautiful/blob/main/MIB_2024/MIB_2024_11/MIB0018_Buddhabrot.py

=================================================================

This strange creature is called the Anti-Buddhabrot, it is the complement of the Buddhabrot distribution. In other words, the Anti-Buddhabrot is the distribution for the trajectories of points inside the Mandelbrot set, i.e., those that remain bounded forever. It does not have the same ethereal appearence of the Buddhabrot, but it is more compact-looking. In fact, rendering this one is slightly tricky because the main bulbs of the object require very exhaustive sampling to avoid excessive graininess. Swiping between this post and the previous one you can compare both distributions in different regions of the complex plane.

Similar images were obtained by Linas Vepstas in 1988 and by Noel Griffin in 1993, when studying general trajectories under the Mandelgrot map. However, the proper definition as far as I know comes from Melinda Green, who presented it together with the Buddhabrot. It was also Melinda Green who noticed that iterations on the real line can be quadratically mapped to the logistic map, and produce a bifurcation diagram. Some visualizations actually represent the bifurcation diagram as the Anti-Buddhabrot seen from its side.

Do it yourself! Source code: https://github.com/raimonluna/MathIsBeautiful/blob/main/MIB_2024/MIB_2024_11/MIB0019_AntiBuddhabrot.py

=================================================================

By popular request, here goes Conway's Game of Life! This is by far the most popular cellular automaton ever created. In a two-dimensional grid, cells can exist in only two states: live or dead. Typically, live cells are shown white and dead cells are black, even though other configurations are also common. In our animation, I am painting live cells yellow, and I use a color map to indicate the number of live neighbors of dead cells. Cells with no live neighbors whatsoever are painted black.

The evolution for this automaton is very simple: Live cells remain alive in the next generation if and only if the number of live neighbors is 2 or 3. Otherwise, they die, either by underpopulation or overpopulation. Dead cells can only become alive if they have exactly 3 live neighbors, which is often called reproduction. 

The great mathematician John Horton Conway created the game in 1970. It was published that same year in Martin Gardner's "Mathematical Games" section of Scientific American. There, Conway conjectured that the population would always be bounded for any given initial state. This conjecture was disproved by Bill Gosper's team at MIT, who presented Gosper's glider gun, a configuration that cyclically produces gliders indefinitely. Four of these structures can be found in the animation above.

Do it yourself! Source code: https://github.com/raimonluna/MathIsBeautiful/blob/main/MIB_2024/MIB_2024_11/MIB0020_GameOfLife.py

=================================================================

The Scramble Squares is a surprisingly difficult puzzle where 9 square pieces have to be arranged in such a way that their adjacent edges match. There are four possible pictures, with two different halfs each. Each edge of the puzzle pieces has one particular half of a particular image. You can find versions of it with animals, airplanes, planets...

The pieces can be placed in 9! x 4^9 different ways, which gives the absolutely ridiculous number of 95.126.814.720 possible combinations. However, if the game is built correctly, only one solution exists! This post comes after some friends and me were betting on whether a computer algorithm would be able to solve it in a reasonable time. Obviously, trying every possible combination is way out of the question.

However, the problem turned out to be solvable by depth search using a programming technique known as backtracking. This algorithm explores the decision tree of different piece positions. Since we cannot possibly explore the whole tree, we have to prune it! This means abandoning all branches that have already been proved to lead nowhere. This reduces the number of explored nodes down to 154. The puzzle is therefore solved in about 5 millisecons.  

Do it yourself! Source code: https://github.com/raimonluna/MathIsBeautiful/blob/main/MIB_2024/MIB_2024_11/MIB0021_ScrambleSquares.py

=================================================================

Have you ever noticed the strange heart shape that appears on the surface of coffee in a mug? This shape is produced by the light rays coming from one point point of the mug wall. As they reflect on the walls, the rays span a family of curves in space. All of these lines happen to be tangent to the heart curve, which acts as the envelope for the whole family.

In the particular case of light rays, envelopes are usually known as caustics. The name comes from the fact that a sufficient concentration of light can cause burning, especially at cusp singularities. The heart-shaped caustic curve created in a coffee mug is actually a cardioid, which has one of such cusp singularities.

Do it yourself! Source code: https://github.com/raimonluna/MathIsBeautiful/blob/main/MIB_2024/MIB_2024_11/MIB0022_MugCardioid.py

























