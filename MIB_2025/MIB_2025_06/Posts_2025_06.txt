=================================================================

This maze has been generated using Prim's Algorithm, which is a vey famous method in graph theory to find minimum spanning trees. The algorithm itself was first discovered 1930 by Vojtěch Jarník, but then Robert C. Prim and Edsger W. Dijkstra found it independently, and published it in 1957 and 1959 respectively. For the maze, each of the cells is treated as a vertex of a graph, which can be connected when they are adjacent and there is no wall between them. The tree structure of the graph guarantees that the solution is unique.

The solution of the maze is pretty straightforward if you start from the end, and know the minimum distance of any cell to the maze entrance. You just have to start at the end cell, and take at each step the direction that lowers the distance to the entrance. The minimum distance function is typically not so easy to find, and it usually requires an additional algorithm such as Dijkstra's algorithm. In this case, this distance function (shown as a color map), is already known from the way the maze was built.

Do it yourself! Source code: https://github.com/raimonluna/MathIsBeautiful/blob/main/MIB_2025/MIB_2025_06/MIB0038_PrimAlgorithm.py

=================================================================

After making the last post, I found out that the distance function for Prim's algorithm looks really cool for very large mazes. For this reason, here I generated a minimum spanning tree for a 200x200 grid, starting from its center. The colormap represents the distance, in number of edges, to the central node. 

As the graph has no closed loops, the trajectories leading to its center split into different branches. Some of them are easier to reach, you could call them shortcuts, and others require more steps to access. This creates an amazing pattern that resembles an explosion, or some portal to another world. They also remind me of the mysterious tunnels that Doctor Who uses to travel with his TARDIS.

Do it yourself! Source code: https://github.com/raimonluna/MathIsBeautiful/blob/main/MIB_2025/MIB_2025_06/MIB0039_PrimDistance.py

=================================================================

A Fourier series is a really remarkable way of decomposing any periodic function into a combination of trigonometric functions, sines and cosines. In other words, we can use a Fourier series to draw any closed curve by concatenating a large number of spinning circles, each one with a different rotation speed and phase. In the picture we concatenate the red segments, each one turning inside of a yellow circle, in such a way that each segment starts at the tip of the previous one. By rotating 100 of them at once, each with a multiple of the fundamental frequency, we can recreate the picture of an umbrella.

Fourier series were introduced in 1807 by Jean-Baptiste Joseph Fourier in an article about heat conduction in solids. However, their use extends far beyond the study of heat. Actually, they are arguably one of the most important and powerful tools of modern mathematics, physics and engineering. They are widely used in sound and image processing, as well as in the solution of differential equations and other mathematical problems.

A common example of a Fourier series appears when we analyze the sound waves of a single note from a musical instrument. Even though the note has a standard fundamental frequency, say 440 Hz, it will always contain higher harmonics that produce the distinct sound of that particular instrument. The different amplitudes of such harmonics are the terms of the Fourier series of that signal. Thanks to modern computational tools such as the FFT, this type of analysis is routinely used in music software.

Do it yourself! Source code: https://github.com/raimonluna/MathIsBeautiful/blob/main/MIB_2025/MIB_2025_06/MIB0040_FourierSeries.py

=================================================================

A Paul trap is a device that can be used to trap charged particles, such as ions. It is often used in experimetal physics, mass spectrometry and as a key component in quantum computing. Paul traps were developed by Wolfgang Paul in the 1950s, for which he shared the Nobel Prize in Physics in 1989. He used to refer to Wolfgang Pauli, another notorious physicist, as his imaginary part.

Earnshaw's theorem states that it is impossible to confine charged particles using static electric fields. These traps, also known as quadripole ion traps, overcome this restriction by introducing oscillating fields, which result in a stable confining effect. The dynamics and stability conditions for ions in oscillating traps can be studied using Mathieu's equation, which already appeared in this channel (MIB0031).

There are several mechanical and magnetical analogs to Paul traps. A very popular example is the rotating saddle, in which a metal ball can be trapped on top of a rotating surface shaped like a horse saddle. In this post we show a simulation of this rotating saddle, with 100 particles. The angular velocity slowly decreases with time, until it goes below the threshold of stability (the last quarter of the video) and the particles disperse. 

Do it yourself! Source code: https://github.com/raimonluna/MathIsBeautiful/blob/main/MIB_2025/MIB_2025_06/MIB0041_PaulTrap.py

=================================================================

The stable fluids algorithm is a method to simulate the flow of an incompressible viscous fluid, like water. This particular method was introduced in 1999 by Jos Stam, and it is widely used in computer graphics as it is quite realistic, computationally very efficient and unconditionally stable. This makes it very useful even for real-time interaction.

The simulation above is a Python adaptation of the code by Felix Köhler for the great YouTube channel Machine Learning & Simulation. The color map shows the vorticity, i.e., the curl of the velocity field, which is a common way of highlighting the small vortices and eddies moving around the fluid.

This method evolves the velocity field by iterating four basic steps: external forcing, advection, diffusion, and divergence removal. The last two steps can be done very efficiently using the Fast Fourier Transform (FFT), as derivatives in Fourier space simply become products by the wavevector k.

Do it yourself! Source code: https://github.com/raimonluna/MathIsBeautiful/blob/main/MIB_2025/MIB_2025_06/MIB0042_StableFluids.py

=================================================================





